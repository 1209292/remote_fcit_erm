<?php
require_once ("database_object.php");
require_once ("database.php");
class Member extends DatabaseObject
{
    public $id;
    public $password;
    public $first_name;
    public $last_name;
    public $full_name;
    public $image_file;
    public $email;
    public $description;
    public $temp_path;
    protected static $table_name = "members";
    protected static $db_fields = array('id', 'first_name', 'last_name', 'full_name', 'password');
    public $errors=array();
    protected $upload_errors = array(
        UPLOAD_ERR_OK           => "No errors.",
        UPLOAD_ERR_INI_SIZE     => "Larger than upload_max_filesize.",
        UPLOAD_ERR_FORM_SIZE    => "Larger than MAX_FILE_SIZE",
        UPLOAD_ERR_PARTIAL      => "Patal upload.",
        UPLOAD_ERR_NO_FILE      => "No file.",
        UPLOAD_ERR_NO_TMP_DIR   => "No temporary directory.",
        UPLOAD_ERR_CANT_WRITE   => "Can't write to disk.",
        UPLOAD_ERR_EXTENSION    => "File upload stopped by extension"
    );

    function __construct()
    {
    }

    public static function construct_with_args($id, $password, $first_name, $last_name, $full_name)
    {
        $object = new static;
        $object->first_name = $first_name;
        $object->last_name = $last_name;
        $object->full_name = $full_name;
        $object->password = $password;
        $object->id = $id;
        return $object;
    }
    // We should update the uploads.member_id table first (member id is a forign key)

    public static function search($query)
    {
        parent::search($query); // TODO: Change the autogenerated stub
        global $database;
        $query = trim($query);
        if (mb_strlen($query)===0){
            // no need for empty search right?
            return false;
        }

        $query = static::limitChars($query);

        // Weighing scores
        $scoreFullTitle = 6;
        $scoreTitleKeyword = 5;
        $scoreFullSummary = 5;
        $scoreSummaryKeyword = 4;


        $keywords = static::filterSearchKeys($query);
        $escQuery = $database->escape_value($query);
        $first_name = array();
        $last_name = array();

        /** Matching full occurences **/
        if (count($keywords) > 1){
            $first_name[] = "if (first_name LIKE '%".$escQuery."%',{$scoreFullTitle},0)";
            $last_name[] = "if (last_name LIKE '%".$escQuery."%',{$scoreFullSummary},0)";
        }
        /** Matching Keywords **/
        foreach($keywords as $key){
            $first_name[] = "if (first_name LIKE '%".$database->escape_value($key)."%',{$scoreTitleKeyword},0)";
            $last_name[] = "if (last_name LIKE '%".$database->escape_value($key)."%',{$scoreSummaryKeyword},0)";
        }

        $sql = "SELECT *,
            (
                (-- Title score
                ".implode(" + ", $first_name)."
                )+
                (-- Summary
                ".implode(" + ", $last_name)."
                )
            ) as relevance
            FROM members
            HAVING relevance > 0
            order by relevance Desc";
        $results = static::find_by_sql($sql);
        if (count($results) <= 0){
            return false;
        }
        return $results;


    }

    public function create_assets($id)
    {
        $paths = array(); // paths of assets
        $create_checks = array();
        $paths['images'] = "C:/wamp/www/fcit_erm/public/images/";
        $paths['uploads']= "C:/wamp/www/fcit_erm/public/uploads/";
        foreach($paths as $index => $path){
            if(file_exists($path . $id)){
                $create_checks[$index] = false;
            }else{
                $create_checks[$index] = mkdir($path . $id);
            }
        }
        return $create_checks;
    }

    public function destroy_assets($id){

        /*For now we going to delete uploads/$member_id folder only, until we see what
        we do with images/$member_id folder*/
        $images_path = $_SERVER['DOCUMENT_ROOT'] . "fcit_erm/public/images/" .
            $id ."/";
        $result = static::deleteDir($images_path);
        return $result;
    }



    public function destroy(){
        // **This function remove the physical file
            $target_path = $_SERVER['DOCUMENT_ROOT'] . "fcit_erm/public/images/" .
                $this->id ."/" . $this->old_image;
            return unlink($target_path) ? true : false;
    }
}
?>
